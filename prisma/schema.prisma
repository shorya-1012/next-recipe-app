// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String           @unique
  first_name      String
  last_name       String
  role            Role             @default(USER)
  posts           Post[]
  profileImageUrl String?
  Comment         Comment[]
  CommentLike     CommentLike[]
  FavouritedPost  FavouritedPost[]
}

model Post {
  postId         String           @id @default(uuid())
  postTitle      String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  imageURL       String
  ingredients    String           @db.Text
  content        String           @db.Text
  category       Category[]
  visibility     Visibility       @default(PUBLIC)
  Comment        Comment[]
  FavouritedPost FavouritedPost[]

  @@index([userId])
}

model Comment {
  commentId String   @id @default(cuid())
  text      String   @db.Text
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postsId], references: [postId])
  postsId   String

  replyToId   String?
  relplyTo    Comment?      @relation("ReplyTo", fields: [replyToId], references: [commentId], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]     @relation("ReplyTo")
  CommentLike CommentLike[]
}

model FavouritedPost {
  id         String @id @default(uuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  post       Post   @relation(fields: [postPostId], references: [postId])
  postPostId String
}

model CommentLike {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  Comment          Comment? @relation(fields: [commentCommentId], references: [commentId])
  commentCommentId String?
  userId           String
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}
